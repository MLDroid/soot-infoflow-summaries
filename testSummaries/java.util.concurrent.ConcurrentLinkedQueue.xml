<?xml version="1.0" ?><methods><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()&gt;"><flows><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;" FieldSig="(this)" sourceSinkType="Field"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node lastRet&gt;" sourceSinkType="Return" TaintSubField="false"></to></flow><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;" FieldSig="(this)" sourceSinkType="Field"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue$Node nextNode&gt;" sourceSinkType="Return" TaintSubField="false"></to></flow><flow><from FieldSig="(this)" sourceSinkType="Field"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Itr: java.util.concurrent.ConcurrentLinkedQueue this$0&gt;" sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)&gt;"><flows><flow><from AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node last&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node first&gt;" ParameterIndex="0" sourceSinkType="Parameter" TaintSubField="false"></to></flow><flow><from AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node first&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node last&gt;" ParameterIndex="0" sourceSinkType="Parameter" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()&gt;"><flows><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;" FieldSig="(this)" sourceSinkType="Field"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: boolean casHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)&gt;"><flows><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" FieldSig="(this)" sourceSinkType="Field" TaintSubField="true"></to></flow><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="1" sourceSinkType="Parameter" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray(java.lang.Object[])&gt;"><flows><flow><from ParameterIndex="0" sourceSinkType="Parameter"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)&gt;"><flows><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="1" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" FieldSig="(this)" sourceSinkType="Field" TaintSubField="true"></to></flow><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="1" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="0" sourceSinkType="Parameter" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: void &lt;init&gt;(java.util.Collection)&gt;"><flows><flow><from AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node last&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node first&gt;" ParameterIndex="0" sourceSinkType="Parameter" TaintSubField="false"></to></flow><flow><from AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node first&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.LinkedList: java.util.LinkedList$Node last&gt;" ParameterIndex="0" sourceSinkType="Parameter" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)&gt;"><flows><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item&gt;" FieldSig="(this)" sourceSinkType="Field" TaintSubField="true"></to></flow><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head&gt;" FieldSig="(this)" sourceSinkType="Field"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow><flow><from AccesPath="&lt;java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next&gt;" ParameterIndex="0" sourceSinkType="Parameter"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method></methods>
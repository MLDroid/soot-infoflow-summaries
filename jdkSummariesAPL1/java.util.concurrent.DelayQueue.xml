<?xml version="1.0" ?><methods><method id="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll(long,java.util.concurrent.TimeUnit)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean offer(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.Delayed take()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: void &lt;init&gt;()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: int drainTo(java.util.Collection)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: void put(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: void clear()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.lang.Object poll()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: int drainTo(java.util.Collection,int)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.lang.Object[] toArray()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: void put(java.util.concurrent.Delayed)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.util.Iterator iterator()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.DelayQueue$Itr: java.lang.Object[] array&gt;" TaintSubField="false"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.DelayQueue$Itr: java.util.concurrent.DelayQueue this$0&gt;" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.Delayed peek()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed,long,java.util.concurrent.TimeUnit)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.lang.Object take()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean add(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.lang.Object[] toArray(java.lang.Object[])&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Parameter" ParameterIndex="0" TaintSubField="false"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: int size()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean add(java.util.concurrent.Delayed)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: void &lt;init&gt;(java.util.Collection)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: boolean remove(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;&lt;java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node firstWaiter&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock&gt;&lt;java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.ReentrantLock$Sync sync&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int size&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: int modCount&gt;" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.DelayQueue: java.lang.Object peek()&gt;"><flows><flow><from sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.DelayQueue: java.util.PriorityQueue q&gt;&lt;java.util.PriorityQueue: java.lang.Object[] queue&gt;" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="false"></to></flow></flows></method></methods>
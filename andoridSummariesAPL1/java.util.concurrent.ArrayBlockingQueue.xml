<?xml version="1.0" ?><methods><method id="&lt;java.util.concurrent.ArrayBlockingQueue: void removeAt(int)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: boolean remove(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: boolean add(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: boolean contains(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: void &lt;init&gt;(int,boolean,java.util.Collection)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: void &lt;init&gt;(int)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.String toString()&gt;"><flows><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.lang.String: char[] value&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.lang.String: int offset&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.lang.String: int count&gt;" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection,int)&gt;"><flows><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.Iterator iterator()&gt;"><flows><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue$Itrs itrs&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue$Itr: int prevTakeIndex&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue$Itr: int prevCycles&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue$Itr: int cursor&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue$Itr: java.lang.Object nextItem&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue$Itr: int nextIndex&gt;" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue$Itr: java.util.concurrent.ArrayBlockingQueue this$0&gt;" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: int inc(int)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: int drainTo(java.util.Collection)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int takeIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Field" FieldSig="(this)"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: int dec(int)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Return" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: void put(java.lang.Object)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int putIndex&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: int count&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method><method id="&lt;java.util.concurrent.ArrayBlockingQueue: void &lt;init&gt;(int,boolean)&gt;"><flows><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notEmpty&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.ReentrantLock lock&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="1"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.lang.Object[] items&gt;" FieldSig="(this)" TaintSubField="true"></to></flow><flow><from sourceSinkType="Parameter" ParameterIndex="0"></from><to sourceSinkType="Field" AccesPath="&lt;java.util.concurrent.ArrayBlockingQueue: java.util.concurrent.locks.Condition notFull&gt;" FieldSig="(this)" TaintSubField="true"></to></flow></flows></method></methods>